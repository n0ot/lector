use phf::phf_map;
use phf::phf_set;

static SYMBOL_NAMES: phf::Map<&'static str, &'static str> = phf_map! {
    " " => "space",
    "!" => "bang!",
    "\"" => "quote",
    "#" => "number",
    "$" => "dollar",
    "%" => "percent",
    "&" => "and",
    "'" => "tick",
    "’" => "tick",
    "(" => "left paren",
    ")" => "right paren",
    "*" => "star",
    "+" => "plus",
    "," => "comma,",
    "-" => "dash",
    "." => "dot.",
    "/" => "slash",
    ":" => "colon:",
    ";" => "semi;",
    "<" => "less",
    "=" => "equals",
    ">" => "greater",
    "?" => "question?",
    "@" => "at",
    "[" => "left bracket",
    "\\" => "backslash",
    "]" => "right bracket",
    "^" => "carrat",
    "_" => "line",
    "`" => "graav",
    "{" => "left brace",
    "|" => "bar",
    "}" => "right brace",
    "~" => "tilde",
    "■" => "black square",
};

static LEVEL_ALL_SYMBOLS: phf::Set<&'static str> = phf_set! {
    "!",
    "\"",
    "#",
    "$",
    "%",
    "&",
    "'",
    "’",
    "(",
    ")",
    "*",
    "+",
    ",",
    "-",
    ".",
    "/",
    ":",
    ";",
    "<",
    "=",
    ">",
    "?",
    "@",
    "[",
    "\\",
    "]",
    "^",
    "_",
    "`",
    "{",
    "|",
    "}",
    "~",
    "■",
};

static LEVEL_CHARACTER_SYMBOLS: phf::Set<&'static str> = phf_set! {
    " ",
    "!",
    "\"",
    "#",
    "$",
    "%",
    "&",
    "'",
    "’",
    "(",
    ")",
    "*",
    "+",
    ",",
    "-",
    ".",
    "/",
    ":",
    ";",
    "<",
    "=",
    ">",
    "?",
    "@",
    "[",
    "\\",
    "]",
    "^",
    "_",
    "`",
    "{",
    "|",
    "}",
    "~",
    "■",
};

#[derive(Copy, Clone)]
pub enum Level {
    All,
    Character,
}

pub fn get(symbol: &str, level: Level) -> Option<&'static str> {
    match level {
        Level::All if LEVEL_ALL_SYMBOLS.contains(symbol) => SYMBOL_NAMES.get(symbol).copied(),
        Level::Character if LEVEL_CHARACTER_SYMBOLS.contains(symbol) => SYMBOL_NAMES.get(symbol).copied(),
        _ => None,
    }
}
